<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on K0ala</title>
    <link>http://liushaoxiong10.github.io/post/</link>
    <description>Recent content in Posts on K0ala</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 12 Jan 2020 01:20:17 +0800</lastBuildDate>
    
	<atom:link href="http://liushaoxiong10.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Etcdctl</title>
      <link>http://liushaoxiong10.github.io/post/etcd/etcdctl/</link>
      <pubDate>Sun, 12 Jan 2020 01:20:17 +0800</pubDate>
      
      <guid>http://liushaoxiong10.github.io/post/etcd/etcdctl/</guid>
      <description></description>
    </item>
    
    <item>
      <title>etcd 使用场景</title>
      <link>http://liushaoxiong10.github.io/post/etcd/where_use_etcd/</link>
      <pubDate>Sun, 12 Jan 2020 01:14:58 +0800</pubDate>
      
      <guid>http://liushaoxiong10.github.io/post/etcd/where_use_etcd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>创建高可用etcd集群</title>
      <link>http://liushaoxiong10.github.io/post/etcd/create_etcd/</link>
      <pubDate>Sat, 11 Jan 2020 23:46:17 +0800</pubDate>
      
      <guid>http://liushaoxiong10.github.io/post/etcd/create_etcd/</guid>
      <description>搭建高可用etcd集群 etcd 简介 ETCD 是一个高可用的分布式键值数据库，可用于服务发现。底层集群 boltDB。
内部采用 raft 协议作为一致性算法。由于Raft算法在做决策时需要多数节点的投票，所以etcd一般部署集群推荐奇数个节点，推荐的数量为3、5或者7个节点构成一个集群。
特点：
 简单：安装配置简单，而且提供了 HTTP API 进行交互，使用也很简单 安全：支持 SSL 证书验证 快速：每个实例每秒支持1k次写操作 可靠：采用 raft 算法，实现分布式系统数据的可用性和一致性  占用端口：
 2379 端口提供 HTTP API 服务 2380 端口和 peers（集群内其他节点）通信  etcd 名词解释  Raft： 保证分布式系统强一致性的算法。 Node： 一个Raft状态机实例。 Member： 一个etcd实例。它管理着一个Node，并且可以为客户端请求提供服务。 Cluster：由多个Member构成可以协同工作的etcd集群。 Peer：对同一个etcd集群中另外一个Member的称呼。 Client： 向etcd集群发送HTTP请求的客户端。 WAL：预写式日志，etcd用于持久化存储的日志格式。 snapshot：etcd防止WAL文件过多而设置的快照，存储etcd数据状态。 Proxy：etcd的一种模式，为etcd集群提供反向代理服务。 Leader：Raft算法中通过竞选而产生的处理所有数据提交的节点。 Follower：竞选失败的节点作为Raft中的从属节点，为算法提供强一致性保证。 Candidate：当Follower超过一定时间接收不到Leader的心跳时转变为Candidate开始Leader竞- 选。 Term：某个节点成为Leader到下一次竞选开始的时间周期，称为一个Term。 Index：数据项编号。Raft中通过Term和Index来定位数据。  工作原理 etcd 集群是由多个 member 组层，每个 member 是一个etcd 实例。
在正常运行的状态下，集群中会有一个 leader，其余的 member 都是 follower。leader 向 follower 同步日志，保证数据在各个 member 都有副本。leader 还会定时向所有的 member 发送心跳报文，如果在规定的时间里 follower 没有收到心跳，就会重新进行选举。</description>
    </item>
    
  </channel>
</rss>